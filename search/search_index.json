{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spokane Tech","text":"<p>Home of SpokaneTech.org, an online hub for Spokane's tech events and groups. It's not just a website; it's a community-driven, open-source initiative aimed at fostering learning and collaboration among aspiring and seasoned tech enthusiasts.</p> <p>Interested in participating? Great! Read on...</p> <p>Here are a few things you can do to get started.</p> <ul> <li>Go to the site and explore. It's live at https://www.spokanetech.org.</li> <li>Look through the open issues and find one that interests you (issues tagged \"good first issue\" could be great candidates).</li> <li>Read the docs! In our documentation directory we have design decisions, style guide, contributing guide and more. Feel free to familiarize yourself with these.</li> <li>Clone the repo to you machine and run locally, explore the code, break things, fix things, have fun. Step-by-step instructions are in the CONTRIBUTION doc.</li> <li>Have a feature idea or found a bug? Create an issue here</li> </ul> <p>To get started contributing, read Contributing.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Code of Conduct","text":"<p>As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.</p> <p>We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.</p> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery</li> <li>Personal attacks</li> <li>Trolling or insulting/derogatory comments</li> <li>Public or private harassment</li> <li>Publishing other's private information, such as physical or electronic   addresses, without explicit permission</li> <li>Other unethical or unprofessional conduct</li> </ul> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p> <p>By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.</p> <p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.</p> <p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer at https://spokanepython.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident.</p> <p>This Code of Conduct is adapted from the Contributor Covenant, version 1.3.0, available at https://www.contributor-covenant.org/version/1/3/0/code-of-conduct.html.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>First off, thank you for considering contributing to SpokaneTech_Py!</p> <p>The following is a set of guidelines for contributing to this project. These are just guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it are governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to organizers@spokanetech.org.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<ul> <li>Before creating bug reports, please check the existing issues as you might find that the issue has already been reported.</li> <li>When creating a bug report, please include a clear and concise description of the problem and steps to reproduce it.</li> </ul>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<ul> <li>Before creating enhancement suggestions, please check the list of open issues as you might find that the suggestion has already been made.</li> <li>When creating an enhancement suggestion, please provide a detailed description and, if possible, an implementation proposal.</li> </ul>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<ul> <li>Provide a clear and concise description of your pull request.</li> <li>Ensure you have tested your changes thoroughly.</li> <li>Add/update unittests as necessary.</li> <li>Make sure code quality tools run successfully. </li> <li>Merging contributions requires passing the checks configured with the CI. This includes running tests, linters, and other code quality tools successfully on the currently officially supported Python and Django versions.</li> </ul>"},{"location":"CONTRIBUTING/#development","title":"Development","text":"<p>You can contribute to this project by forking it from GitHub and sending pull requests.</p> <p>First fork the repository and then clone it:</p> <pre><code>git clone git@github.com:&lt;you&gt;/SpokaneTech_Py.git\n</code></pre> <p>Create a virtual environment and install dependencies:</p> <pre><code>cd SpokaneTech_Py\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.dev.lock\n</code></pre> <p>Note: to add a new dependency see Adding Dependencies.</p> <p><code>python-dotenv</code> will automatically load values in the <code>.env</code> file when Django's <code>manage.py</code> is used. Create a <code>.env</code> file from the template (note: <code>.env</code> should never be checked in to source control!):</p> <pre><code>cp .env.template .env\n</code></pre> <p>Run Django migrations: <pre><code>cd src\npython manage.py migrate\n</code></pre></p> <p>Create a Django superuser: <pre><code>cd src\npython manage.py createsuperuser\n</code></pre></p> <p>Run the Django development web server locally: <pre><code>cd src\npython manage.py runserver\n</code></pre></p> <p>Unit tests are located in each Django app under the tests directory and can be executed via pytest:</p> <pre><code>pytest\n</code></pre> Full walkthrough  Generated using script. The highlighted lines are commands that should be ran in your terminal. Some output is truncated for brevity and is designated by \"...\".  <pre><code>$ python -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install -r requirements.dev.lock\nCollecting asgiref==3.7.2\n  Using cached asgiref-3.7.2-py3-none-any.whl (24 kB)\nCollecting celery[redis]==5.3.6\n  Using cached celery-5.3.6-py3-none-any.whl (422 kB)\nCollecting discord.py==2.3.2\n  Using cached discord.py-2.3.2-py3-none-any.whl (1.1 MB)\n...\nInstalling collected packages: xlwt, webencodings, wcwidth, pytz, paginate, drf-dynamic-fields, cron-descriptor, watchdog, vine, urllib3, tzdata, typing-extensions, tomli, tinycss2, sqlparse, six, regex, redis, pyyaml, python-dotenv, pygments, pycparser, psycopg-binary, prompt-toolkit, pluggy, platformdirs, pillow, pathspec, packaging, multidict, mkdocs-material-extensions, mergedeep, MarkupSafe, markdown, iniconfig, idna, hurry.filesize, frozenlist, exceptiongroup, defusedxml, colorama, click, charset-normalizer, certifi, billiard, babel, attrs, async-timeout, yarl, requests, pyyaml-env-tag, python-dateutil, pytest, pymdown-extensions, psycopg, Jinja2, isodate, gunicorn, cssselect2, click-repl, click-plugins, click-didyoumean, cffi, asgiref, amqp, aiosignal, python-crontab, pytest-django, kombu, ghp-import, freezegun, Django, cryptography, cairocffi, azure-core, aiohttp, model-bakery, mkdocs, djangorestframework, django-timezone-field, django-storages, django-filter, dj-database-url, discord.py, celery, cairosvg, azure-storage-blob, mkdocs-material, djangorestframework-filters, django-celery-results, django-celery-beat, django-handyhelpers\nSuccessfully installed Django-5.0.1 Jinja2-3.1.3 MarkupSafe-2.1.5 aiohttp-3.9.3 aiosignal-1.3.1 amqp-5.2.0 asgiref-3.7.2 async-timeout-4.0.3 attrs-23.2.0 azure-core-1.30.1 azure-storage-blob-12.19.1 babel-2.14.0 billiard-4.2.0 cairocffi-1.6.1 cairosvg-2.7.1 celery-5.3.6 certifi-2024.2.2 cffi-1.16.0 charset-normalizer-3.3.2 click-8.1.7 click-didyoumean-0.3.0 click-plugins-1.1.1 click-repl-0.3.0 colorama-0.4.6 cron-descriptor-1.4.3 cryptography-42.0.5 cssselect2-0.7.0 defusedxml-0.7.1 discord.py-2.3.2 dj-database-url-2.1.0 django-celery-beat-2.6.0 django-celery-results-2.5.1 django-filter-24.1 django-handyhelpers-0.3.20 django-storages-1.14.2 django-timezone-field-6.1.0 djangorestframework-3.15.0 djangorestframework-filters-1.0.0.dev0 drf-dynamic-fields-0.4.0 exceptiongroup-1.2.0 freezegun-1.4.0 frozenlist-1.4.1 ghp-import-2.1.0 gunicorn-21.2.0 hurry.filesize-0.9 idna-3.6 iniconfig-2.0.0 isodate-0.6.1 kombu-5.3.5 markdown-3.6 mergedeep-1.3.4 mkdocs-1.5.3 mkdocs-material-9.5.10 mkdocs-material-extensions-1.3.1 model-bakery-1.17.0 multidict-6.0.5 packaging-24.0 paginate-0.5.6 pathspec-0.12.1 pillow-10.2.0 platformdirs-4.2.0 pluggy-1.4.0 prompt-toolkit-3.0.43 psycopg-3.1.17 psycopg-binary-3.1.17 pycparser-2.21 pygments-2.17.2 pymdown-extensions-10.7.1 pytest-8.0.0 pytest-django-4.8.0 python-crontab-3.0.0 python-dateutil-2.9.0.post0 python-dotenv-1.0.1 pytz-2024.1 pyyaml-6.0.1 pyyaml-env-tag-0.1 redis-5.0.3 regex-2023.12.25 requests-2.31.0 six-1.16.0 sqlparse-0.4.4 tinycss2-1.2.1 tomli-2.0.1 typing-extensions-4.10.0 tzdata-2024.1 urllib3-2.2.1 vine-5.1.0 watchdog-4.0.0 wcwidth-0.2.13 webencodings-0.5.1 xlwt-1.3.0 yarl-1.9.4\nWARNING: You are using pip version 22.0.4; however, version 24.0 is available.\nYou should consider upgrading via the '/Users/user/code/SpokaneTech_Py/venv/bin/python -m pip install --upgrade pip' command.\n(venv) $ cp .env.template .env\n(venv) $ cd src\n(venv) $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, django_celery_beat, django_celery_results, sessions, web\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n...\n  Applying web.0001_initial... OK\n  Applying web.0002_techgroup_event_group... OK\n  Applying web.0003_event_created_at_event_updated_at_and_more... OK\n  Applying web.0004_event_url... OK\n(venv) $ python manage.py createsuperuser\nUsername (leave blank to use 'user'): admin\nEmail address: \nPassword: \nPassword (again): \nSuperuser created successfully.\n(venv) $ python manage.py runserver\nWatching for file changes with StatReloader\nPerforming system checks...\nSystem check identified no issues (0 silenced).\nMarch 22, 2024 - 01:52:19\nDjango version 5.0.1, using settings 'spokanetech.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n^C\n</code></pre>"},{"location":"CONTRIBUTING/#adding-dependencies","title":"Adding Dependencies","text":"<p>The lock files are generated using <code>uv</code>; which is included in the development requirements. To add a file use:</p> <pre><code>uv add [--dev] SOME-DEP\nuv pip compile pyproject.toml --extra dev -o requirements.dev.lock --prerelease=allow\nuv pip compile pyproject.toml -o requirements.lock --prerelease=allow\n</code></pre> <p>Then make sure to sync the virtual environment with the new lock files.</p> <pre><code>uv pip sync requirements.dev.lock\n</code></pre>"},{"location":"CONTRIBUTING/#dagger","title":"Dagger","text":"<p>Dagger is used for continuous integration and  provides a dev environment with a Celery, Redis, and Postgres instances.</p> <p>To run Dagger locally you will need:</p> <ul> <li>The Dagger CLI</li> <li>The Docker Engine</li> </ul> <p>To run all linters at once: <pre><code>dagger call linters all\n</code></pre></p> <p>To spin up a dev environment use: <pre><code>dagger call up\n</code></pre></p> <p>This command:</p> <ul> <li>Spins up the Django Server, Redis, Postgres, and Celery</li> <li>Creates a Django admin with username/password <code>dagger</code>/<code>dagger</code></li> <li>Tunnels the Django server to localhost:8000</li> </ul> <p>The Postgres database is mounted as a cache volume, so its state will persist between runs.  To wipe the database, pass the <code>--fresh-database</code>.</p> More Details  To list available functions use: <pre><code>dagger functions\n</code></pre>  Then, to call the functions use:  <pre><code>dagger call FUNCTION-NAME FUNCTION-ARGS\n</code></pre>  To gather more information about a function, you can pass the `--help` arg to it:  <pre><code>$ dagger call linters test --help\nRun tests using Pytest.\n\nUsage:\n  dagger call linters test [flags]\n\nFlags:\n      --dev-req File     A file.\n      --pyproject File   A file.\n\nGlobal Flags:\n      --debug             Show more information for debugging\n      --focus             Only show output for focused commands (default true)\n      --json              Present result as JSON\n  -m, --mod string        Path to dagger.json config file for the module\n                          or a directory containing that file. Either\n                          local path (e.g. \"/path/to/some/dir\") or a\n                          github repo (e.g.\n                          \"github.com/dagger/dagger/path/to/some/subdir\")\n  -o, --output string     Path in the host to save the result to\n      --progress string   progress output format (auto, plain, tty)\n                          (default \"auto\")\n  -s, --silent            disable terminal UI and progress output\n</code></pre>  For functions that return a `Container` - like `dev` - addtional commands can be chained on that will act on that container. For example, the following command transforms the development container into a service, and starts it.  <pre><code>dagger call up\n</code></pre>"},{"location":"CONTRIBUTING/#contributing-to-ci","title":"Contributing to CI","text":"<p>When contributing to the CI it can be useful to install the SDK for autocomplete and linting. Plus, this enables type hints for third party modules, not just the first party Dagger SDK. Inside your virtual environment, run the following commands:</p> <pre><code>dagger develop # Generates the SDK\npip install -e ./dagger/sdk\n</code></pre> <p>Dagger has an in-depth Developing with Python guide, and the Python SDK referance is here. </p>"},{"location":"CONTRIBUTING/#celery","title":"Celery","text":"<p>The easiest way to run Celery is using the Dagger development environment described above. </p> <p>To run Celery manually you will need to start a message broker and a Celery worker. We are using redis for our message broker. Make sure you have Docker installed and run the following docker command to start a redis container:</p> <pre><code>docker run -t -p 6379:6379 redis:7.2\n</code></pre> <p>In a separate terminal, run the Celery worker:</p> <pre><code>python -m celery --workdir ./src -A spokanetech.celery worker -B -l INFO\n</code></pre> <p>After running the Celery worker, you should see periodic tasks show in the Django admin UI:</p> <pre><code>cd src\npython manage.py runserver # (1)!\n</code></pre> <ol> <li>Then navigate to the Django admin UI</li> </ol> <p></p> <p>Refer to our Celery docs for more information on how Celery works.</p>"},{"location":"CONTRIBUTING/#docs","title":"Docs","text":"<p>When updating the docs locally, run the mkdocs server with <code>mkdocs serve</code>.</p> <p>You can also build the docs with <code>mkdocs build</code>.</p>"},{"location":"CONTRIBUTING/#style-guide","title":"Style Guide","text":"<p>Follow the coding style outlined in the style guide.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the GNU-3 license.</p>"},{"location":"STYLE_GUIDE/","title":"Style Guide","text":"<p>This Python style guide provides conventions and best practices for writing clean and maintainable Python code. Adhering to these guidelines will help ensure consistency across projects and enhance the clarity, maintainability,  and readability of the code.</p>"},{"location":"STYLE_GUIDE/#pep-8","title":"PEP 8","text":"<p>Adhere to the PEP 8 style guide, which is the style guide for Python code. Please make sure to familiarize yourself with PEP 8 guidelines: PEP 8 -- Style Guide for Python Code.</p>"},{"location":"STYLE_GUIDE/#line-length","title":"Line Length","text":"<p>The maximum line length for code and comments is set to 120 characters. This allows for better readability without excessively long lines.</p>"},{"location":"STYLE_GUIDE/#naming-conventions","title":"Naming Conventions","text":""},{"location":"STYLE_GUIDE/#classes","title":"Classes","text":"<ul> <li>Class names should follow the CamelCase convention.</li> <li>Class names should be descriptive and represent a clear concept or object.</li> </ul> <pre><code>class Calculator:\n    def __init__(self):\n        # Constructor implementation\n\n    def add(self, x, y):\n        # Method implementation\n</code></pre>"},{"location":"STYLE_GUIDE/#functions","title":"Functions","text":"<ul> <li>Function names should be lowercase, with words separated by underscores.</li> <li>Function names should begin with a verb to indicate the action or operation they perform.</li> </ul> <pre><code>def calculate_sum(numbers):\n    \"\"\"Calculate the sum of a list of numbers.\"\"\"\n    # Function implementation\n\ndef validate_input(user_input):\n    \"\"\"Validate user input and return True if valid, False otherwise.\"\"\"\n    # Function implementation\n\ndef process_data(data):\n    \"\"\"Process the given data and return the result.\"\"\"\n    # Function implementation\n</code></pre>"},{"location":"STYLE_GUIDE/#variables","title":"Variables","text":"<p>Choosing meaningful and consistent variable names is essential for code readability. Follow these conventions:</p> <ul> <li>Use lowercase letters with underscores for variable names (snake_case).</li> <li>Be descriptive and use meaningful names to indicate the purpose of the variable.</li> </ul> <pre><code># Good variable names\nuser_name = \"John\"\nnum_items = 5\ntotal_amount = 100.50\n\n# Avoid ambiguous or single-letter names\na = \"John\"  # Not recommended\nn = 5       # Not recommended\n</code></pre> <ul> <li>Constants should be in uppercase with underscores.</li> </ul> <pre><code>MAX_RETRIES = 3\nPI = 3.14159\n</code></pre> <ul> <li>Avoid using names that shadow built-in functions or keywords.</li> </ul> <pre><code># Bad: Don't use 'list' as a variable name\nlist = [1, 2, 3]\n\n# Good: Choose a different name\nmy_list = [1, 2, 3]\n</code></pre> <ul> <li>Use meaningful prefixes and suffixes for variable names where applicable.</li> </ul> <pre><code># Prefix 'is_' for boolean variables\nis_valid = True\n\n# Suffix iterators with type (such as '_list')\nname_list = [\"John\", \"Mary\", \"Robert\", \"Sue\"]\n</code></pre>"},{"location":"STYLE_GUIDE/#docstrings","title":"Docstrings","text":"<p>Documenting your code is crucial for understanding its functionality and usage. Use Google-style docstrings to provide clear and concise documentation.</p>"},{"location":"STYLE_GUIDE/#module-docstring","title":"Module Docstring","text":"<ul> <li>Include a module-level docstring at the beginning of each Python file.</li> <li>Use triple double-quotes for multi-line docstrings.</li> </ul> <pre><code>\"\"\"Module-level docstring.\n\nThis module provides utility functions for handling calculations.\n\"\"\"\n\n# Rest of the module code\n</code></pre>"},{"location":"STYLE_GUIDE/#class-docstring","title":"Class Docstring","text":"<ul> <li>Include a class-level docstring immediately below the class definition.</li> <li>Briefly describe the purpose and usage of the class.</li> </ul> <pre><code>class Calculator:\n    \"\"\"A simple calculator class.\n\n    This class provides basic arithmetic operations such as addition and subtraction.\n    \"\"\"\n\n    def __init__(self):\n        # Constructor implementation\n</code></pre>"},{"location":"STYLE_GUIDE/#function-docstring","title":"Function Docstring","text":"<ul> <li>Include a function-level docstring immediately below the function definition.</li> <li>Provide a clear description of the function's purpose, parameters, and return values.</li> </ul> <pre><code>def calculate_sum(numbers):\n    \"\"\"Calculate the sum of a list of numbers.\n\n    Args:\n        numbers (list): A list of numerical values.\n\n    Returns:\n        float: The sum of the input numbers.\n    \"\"\"\n    # Function implementation\n</code></pre>"},{"location":"STYLE_GUIDE/#typing","title":"Typing","text":"<p>Python's optional type hints, introduced in PEP 484 and expanded in subsequent PEPs, provide a way to statically indicate the type of variables and function parameters. Proper use of typing can enhance code readability, maintainability, and catch certain types of errors early in the development process.</p>"},{"location":"STYLE_GUIDE/#general-guidelines","title":"General Guidelines","text":""},{"location":"STYLE_GUIDE/#1-use-type-hints","title":"1. Use Type Hints","text":"<p>Type hints should be used consistently to indicate the expected types of variables and function parameters.</p> <pre><code>def add_numbers(a: int, b: int) -&gt; int: # (1)!\n    return a + b\n</code></pre> <ol> <li>There is a function parameter type hint: <code>: int</code> and a function return type type hint: <code>-&gt; int</code>.</li> </ol>"},{"location":"STYLE_GUIDE/#2-avoid-redundant-type-hints","title":"2. Avoid Redundant Type Hints:","text":"<p>Avoid providing type hints when the type is obvious from the variable name or the context.</p> <pre><code># Bad\nname: str = \"John\"\n\n# Good\nage = 30  # Type is clear without specifying it\n</code></pre>"},{"location":"STYLE_GUIDE/#3-use-expressive-variable-names","title":"3. Use Expressive Variable Names","text":"<p>Choose variable names that convey meaning and make type hints redundant.</p> <pre><code>def calculate_area(length: float, width: float) -&gt; float:\n    return length * width\n</code></pre>"},{"location":"STYLE_GUIDE/#4-be-consistent-with-typing-styles","title":"4. Be Consistent with Typing Styles","text":"<p>Choose a consistent style for type hints, either using the <code>:</code> notation or the <code>-&gt;</code> notation for function return types.</p> <pre><code># Consistent style with `:`\ndef greet(name: str):\n    print(f\"Hello, {name}!\")\n\n# Consistent style with `-&gt;`\ndef multiply(a: int, b: int) -&gt; int:\n    return a * b\n</code></pre>"},{"location":"STYLE_GUIDE/#specific-typing-practices","title":"Specific Typing Practices","text":""},{"location":"STYLE_GUIDE/#1-type-annotations-for-variables","title":"1. Type Annotations for Variables","text":"<p>Use type annotations for variables, especially in cases where the type might not be immediately obvious.</p> <pre><code>count: int = 0\n</code></pre>"},{"location":"STYLE_GUIDE/#2-type-annotations-for-function-parameters-and-return-types","title":"2. Type Annotations for Function Parameters and Return Types","text":"<p>Clearly annotate the types of function parameters and return types.</p> <pre><code>def calculate_total(items: List[float]) -&gt; float:\n    return sum(items)\n</code></pre>"},{"location":"STYLE_GUIDE/#3-type-aliases","title":"3. Type Aliases","text":"<p>Create readable and self-documenting type aliases for complex types.</p> <pre><code>Coordinates = tuple[float, float]\nPointList = list[Coordinates]\n\ndef plot_points(points: PointList) -&gt; None:\n    # Plotting logic here\n</code></pre>"},{"location":"STYLE_GUIDE/#4-union-types","title":"4. Union Types","text":"<p>Use Union types when a variable or parameter can have multiple types.</p> <pre><code>from typing import Union\n\ndef display_value(value: Union[int, float, str]) -&gt; None:\n    print(value)\n</code></pre>"},{"location":"STYLE_GUIDE/#5-type-hinting-in-generics","title":"5. Type Hinting in Generics","text":"<p>Use generic types when working with containers or collections.</p> <pre><code>def process_data(data: list[tuple[str, int]]) -&gt; None:\n    # Processing logic here\n</code></pre>"},{"location":"STYLE_GUIDE/#6-callable-types","title":"6. Callable Types","text":"<p>Clearly annotate callable types using Callable from the typing module.</p> <pre><code>from typing import Callable\n\ndef apply_function(func: Callable[[int, int], int], a: int, b: int) -&gt; int:\n    return func(a, b)\n</code></pre>"},{"location":"STYLE_GUIDE/#virtual-environments","title":"Virtual Environments","text":""},{"location":"STYLE_GUIDE/#introduction","title":"Introduction","text":"<p>A virtual environment is a self-contained directory that contains a Python interpreter and allows you to install and manage project-specific dependencies. Use a virtual environment to isolate project dependencies and avoid conflicts with system-wide packages.</p> <p>Python 3 provides a built-in module for creating virtual environments: venv.</p>"},{"location":"STYLE_GUIDE/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<p>To create a virtual environment, use the following command at the root of the repository:</p> <pre><code>python -m venv venv\n</code></pre>"},{"location":"STYLE_GUIDE/#activating-the-virtual-environment","title":"Activating the Virtual Environment","text":"<p>Once the virtual environment is created, activate it in your terminal using the appropriate command for your operating system:</p> <p>For Windows:</p> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>For Mac and Linux (including WSL):</p> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"celery/","title":"Celery","text":"<p>Celery is the standard package for doing background task processing in Python. It can run tasks outside of the WSGI/ASGI loop. Celery involves several differnent pieces to set up correctly:</p> An example Celery diagram from Fly.io <p>Here are a few articles that help explain how Django and Celery work together:</p> <ul> <li>First steps with Django: Using Celery with Django (OFFICIAL)</li> <li>Asynchronous Tasks With Django and Celery (RealPython)</li> <li>Celery Async Tasks on Fly Machines (Fly.io)</li> </ul>"},{"location":"infrastructure/","title":"Infrastructure","text":"<p>Spokane Tech uses a few different platforms for its infrastructure needs:</p>"},{"location":"infrastructure/#azure","title":"Azure","text":"<ul> <li>Azure Web App / App Service<ul> <li>We are using an Azure Container Registry to store our container images</li> <li>These container images are deployed to the app service automatically</li> <li>We use a sidecar app to run a Celery worker and beat scheduler</li> </ul> </li> <li>Azure Database for PostgreSQL - Flexible Server<ul> <li>Hosted PostgreSQL database (currently version 16) for use with Django</li> </ul> </li> <li>Azure Cache for Redis<ul> <li>Currently just used as a message queue for Celery</li> <li>May be used for caching in the future</li> </ul> </li> <li>Azure Blob Storage<ul> <li>Media and static file storage</li> </ul> </li> <li>Azure Communication Services<ul> <li>For sending emails from Django</li> </ul> </li> </ul>"},{"location":"infrastructure/#other","title":"Other","text":"<ul> <li>Sentry<ul> <li>Error tracking and reporting</li> <li>We are currently on the free tier which only allows one account per project. If you have questions about access, reach out to organizers@spokanetech.org.</li> </ul> </li> </ul>"},{"location":"infrastructure/#cicd","title":"CI/CD","text":"<ul> <li>The production environment is available at https://spokanetech.org<ul> <li>The production environment is deployed to Azure using <code>Dockerfile</code> and GitHub Actions</li> <li>Production is automatically updated when a pull request is merged to the main branch via the <code>deploy</code> workflow</li> </ul> </li> </ul>"},{"location":"vision/","title":"About the Spokane Tech Project","text":"<p>The Spokane Tech website is a project for the community made by the community. The aim of the project is to deliver a community resource for all things tech in the Inland Northwest while providing an opportunity for contributes to gain real-world experience in a shared open source project.</p>"},{"location":"vision/#what-are-doing-this","title":"What are doing this?","text":""},{"location":"vision/#reason-1","title":"Reason 1:","text":"<p>There is a thriving tech community in Spokane, but many members of our community are disconnected. With multiple tech groups on different platforms, such as meetup and eventbright, there are often events of interest happening that many tech enthusiasts are not aware of. The intent is to have a single resource that includes local tech groups and the events they host.</p>"},{"location":"vision/#reason-2","title":"Reason 2:","text":"<p>Many developers in our community, especially those earlier in thier career, have skills and drive, but haven't had the opportunity to work on a project in a real professional environment. For example, a developer could have great knowledge in coding, but hasn't yet had the first professional job or participated in project with milestones, project planning, code reviews, etc. The Spokane Tech project aims to provide this and give contributes a project they can reference for career development, personal portfolios, interviews, etc. </p>"},{"location":"vision/#initial-vision","title":"Initial Vision","text":"<p>What our project (and webapp) becomes will ultimately be dictated by members of the project and will likely evolve over time. Below are some details of the initial vision.</p>"},{"location":"vision/#phase-one","title":"Phase One:","text":"<p>Have a web site that houses groups and events. Events may be manually or automatically added to our site. We will have views that list all the groups and events, as well as detail pages for each group and event. Ideally we'll also have a calendar view that can list all events and perhaps be filterable.</p>"},{"location":"vision/#phase-two","title":"Phase Two:","text":"<p>Have event requests and suggestions capabilities. Here members can post a suggested events they want to give or have someone else give, and others can up/down vote the event (think reddit or stackoverflow). This can be used to prioritize events base on community interest. This can also serve as a living backlog of event ideas. Add labels to events, such as technical areas (frontend, scripting, ML, etc.) and topic levels (beginner/intermediate/etc.). With labels people can filter event based on interest and other criteria.</p>"},{"location":"vision/#phase-three","title":"Phase Three:","text":"<p>Build member profiles. With profiles, we can have some basic metrics on things like career level, geographic location, interested and expertise. This data can help provide viability into the overall tech presence in Spokane and help drive event topics and location. This could also be a future resource to make available to local businesses and the community for things like contract work, etc. (There has been some outside interest in this type of resource)</p>"},{"location":"vision/#future-goals","title":"Future goals:","text":"<p>The Spokane Tech project was started mostly by members of the Spokane Python User Group (SPUG), so naturally the first version of the website is based on python. In the future the project will be re-created in other languages/frameworks/etc. (such as Golang or Rust) as member interest dictates. This is intended to foster growth, knowledge-sharing, and exposure to different tech stacks and methodologies.</p>"},{"location":"vision/#interested-in-participating-great-read-on","title":"Interested in participating? Great! Read on...","text":"<p>Here are a few things you can do to get started.</p> <ul> <li> <p>Go to the site and explore. It's live at https://www.spokanetech.org</p> </li> <li> <p>Look through the open issues and find one that interests you (issues tagged \"good first issue\" could be great candidates) https://github.com/SpokaneTech/SpokaneTech_Py/issues </p> </li> <li> <p>Read the docs: In our documentation directory we have design decisions, style guide, contributing guide and more. Feel free to familiarize yourself with these.  https://spokanetech.github.io/SpokaneTech_Py/ </p> </li> <li> <p>clone the repo to you machine and run locally, explore the code, break things, fix things, have fun. Step by step instructions are in the CONTRIBUTION doc.</p> </li> <li> <p>Have a feature idea or found a bug? Create an issue here:  https://github.com/SpokaneTech/SpokaneTech_Py/issues  </p> </li> </ul>"},{"location":"vision/#need-more-help-or-direction","title":"Need more help or direction?","text":"<p>Join the Discord channel:   https://discord.com/channels/1087885800311632043/1175132957959266347 (best option) or post a question here:  https://github.com/SpokaneTech/SpokaneTech_Py/issues/new/choose </p> <p>New to python, django, git, webdev? Reach out in the Discord channel and suggest a virtual meet. We'll schedule these on occasion, or as interest dictates. This can be used as q&amp;a sessions, code paring, shared code reviews, or just follow along as a member works on an issue.</p>"}]}